{"ast":null,"code":"/*!\n * download-stats <https://github.com/doowb/download-stats>\n *\n * Copyright (c) 2016, Brian Woodward.\n * Licensed under the MIT License.\n */\n'use strict';\n\nvar calc = require('./lib/calculate');\n\nvar utils = require('./lib/utils');\n\nvar get = require('./lib/get');\n\nvar stats = {};\n/**\n * Get a range of download counts for the specified repository.\n * This method returns a stream of raw data\n * in the form of `{ day: '2016-01-10', downloads: 123456 }`.\n *\n * ```js\n * var start = new Date('2016-01-09');\n * var end = new Date('2016-01-10');\n * stats.get(start, end, 'micromatch')\n *   .on('error', console.error)\n *   .on('data', function(data) {\n *     console.log(data);\n *   })\n *   .on('end', function() {\n *     console.log('done.');\n *   });\n * // { day: '2016-01-09', downloads: 53331 }\n * // { day: '2016-01-10', downloads: 47341 }\n * ```\n *\n * @param  {Date} `start` Start date of stream.\n * @param  {Date} `end`   End date of stream.\n * @param  {String} `repo`  Repository to get downloads for. If `repo` is not passed, then all npm downloads for the day will be returned.\n * @return {Stream} Stream of download data.\n * @api public\n * @name get\n */\n\nstats.get = get;\n/**\n * Calculate object containing methods to calculate stats on arrays of download counts.\n * See [calculate][#calculate] api docs for more information.\n *\n * @api public\n * @name calc\n */\n\nstats.calc = calc;\n/**\n * Exposes `stats`\n */\n\nmodule.exports = stats;","map":{"version":3,"sources":["C:/Users/LPT158/Desktop/New folder/reactpro/node_modules/download-stats/index.js"],"names":["calc","require","utils","get","stats","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA,IAAIA,IAAI,GAAGC,OAAO,CAAC,iBAAD,CAAlB;;AACA,IAAIC,KAAK,GAAGD,OAAO,CAAC,aAAD,CAAnB;;AACA,IAAIE,GAAG,GAAGF,OAAO,CAAC,WAAD,CAAjB;;AACA,IAAIG,KAAK,GAAG,EAAZ;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAA,KAAK,CAACD,GAAN,GAAYA,GAAZ;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAC,KAAK,CAACJ,IAAN,GAAaA,IAAb;AAEA;AACA;AACA;;AAEAK,MAAM,CAACC,OAAP,GAAiBF,KAAjB","sourcesContent":["/*!\n * download-stats <https://github.com/doowb/download-stats>\n *\n * Copyright (c) 2016, Brian Woodward.\n * Licensed under the MIT License.\n */\n\n'use strict';\nvar calc = require('./lib/calculate');\nvar utils = require('./lib/utils');\nvar get = require('./lib/get');\nvar stats = {};\n\n/**\n * Get a range of download counts for the specified repository.\n * This method returns a stream of raw data\n * in the form of `{ day: '2016-01-10', downloads: 123456 }`.\n *\n * ```js\n * var start = new Date('2016-01-09');\n * var end = new Date('2016-01-10');\n * stats.get(start, end, 'micromatch')\n *   .on('error', console.error)\n *   .on('data', function(data) {\n *     console.log(data);\n *   })\n *   .on('end', function() {\n *     console.log('done.');\n *   });\n * // { day: '2016-01-09', downloads: 53331 }\n * // { day: '2016-01-10', downloads: 47341 }\n * ```\n *\n * @param  {Date} `start` Start date of stream.\n * @param  {Date} `end`   End date of stream.\n * @param  {String} `repo`  Repository to get downloads for. If `repo` is not passed, then all npm downloads for the day will be returned.\n * @return {Stream} Stream of download data.\n * @api public\n * @name get\n */\n\nstats.get = get;\n\n/**\n * Calculate object containing methods to calculate stats on arrays of download counts.\n * See [calculate][#calculate] api docs for more information.\n *\n * @api public\n * @name calc\n */\n\nstats.calc = calc;\n\n/**\n * Exposes `stats`\n */\n\nmodule.exports = stats;\n"]},"metadata":{},"sourceType":"script"}