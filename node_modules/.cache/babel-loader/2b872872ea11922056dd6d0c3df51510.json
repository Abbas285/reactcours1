{"ast":null,"code":"'use strict';\n\nconst url = require('url');\n\nconst fetch = require('node-fetch');\n\nconst utils = require('./utils');\n\nconst config = require('./config');\n/**\n * View constructor. Create an instance of a view associated with a couchdb view in the npm registry.\n *\n * ```js\n * const view = new View('dependedUpon');\n * ```\n *\n * @param {String} `name` Name of couchdb view to use.\n * @returns {Object} instance of `View`\n * @name View\n * @api public\n */\n\n\nclass View {\n  constructor(name) {\n    this.name = name;\n    this.config = utils.clone(config);\n    this.config.pathname += '/_view/' + this.name;\n  }\n  /**\n   * Query the couchdb view with the provided parameters.\n   *\n   * ```js\n   * let results = await view.query({\n   *   group_level: 2,\n   *   startkey: JSON.stringify(['micromatch']),\n   *   endkey: JSON.stringify(['micromatch', {}])\n   * });\n   * ```\n   * @param  {Object} `params` URL query parameters to pass along to the couchdb view.\n   * @return {Promise} Results of the query when promise is resolved.\n   * @name .query\n   * @api public\n   */\n\n\n  async query(params = {}) {\n    const response = await fetch(this.url(params));\n\n    if (!response.ok) {\n      throw new Error(response.statusText);\n    }\n\n    return new Promise((resolve, reject) => {\n      let items = [];\n      let header = {};\n      response.body.pipe(utils.JSONStream.parse('rows.*')).on('header', data => {\n        header = data;\n\n        if (header.error) {\n          reject(new Error(header.reason || header.error));\n        }\n      }).on('data', data => {\n        items.push(data);\n      }).once('error', reject).once('end', () => {\n        resolve(items);\n      });\n    });\n  }\n  /**\n   * Query the couchdb view with the provided parameters and return a stream of results.\n   *\n   * ```js\n   * view.stream({\n   *   group_level: 2,\n   *   startkey: JSON.stringify(['micromatch']),\n   *   endkey: JSON.stringify(['micromatch', {}])\n   * })\n   * .on('data', (data) => {\n   *   console.log(data);\n   * });\n   * ```\n   * @param  {Object} `params` URL query parameters to pass along to the couchdb view.\n   * @return {Stream} Streaming results of the query.\n   * @name .stream\n   * @api public\n   */\n\n\n  stream(params = {}) {\n    const stream = utils.JSONStream.parse('rows.*');\n    fetch(this.url(params)).then(response => {\n      if (!response.ok) {\n        throw new Error(response.statusText);\n      }\n\n      response.body.pipe(stream);\n    }).catch(e => stream.emit('error', e));\n    return stream;\n  }\n  /**\n   * Build a formatted url with the provided parameters.\n   *\n   * @param  {Object} `query` URL query parameters.\n   * @return {String} formatted url string\n   * @name .url\n   * @api public\n   */\n\n\n  url(query = {}) {\n    return url.format({ ...this.config,\n      query\n    });\n  }\n\n}\n/**\n * Exposes `View`\n */\n\n\nmodule.exports = View;","map":{"version":3,"sources":["C:/Users/LPT158/Desktop/New folder/reactpro/node_modules/npm-api/lib/view.js"],"names":["url","require","fetch","utils","config","View","constructor","name","clone","pathname","query","params","response","ok","Error","statusText","Promise","resolve","reject","items","header","body","pipe","JSONStream","parse","on","data","error","reason","push","once","stream","then","catch","e","emit","format","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst url = require('url');\nconst fetch = require('node-fetch');\nconst utils = require('./utils');\nconst config = require('./config');\n\n/**\n * View constructor. Create an instance of a view associated with a couchdb view in the npm registry.\n *\n * ```js\n * const view = new View('dependedUpon');\n * ```\n *\n * @param {String} `name` Name of couchdb view to use.\n * @returns {Object} instance of `View`\n * @name View\n * @api public\n */\n\nclass View {\n  constructor(name) {\n    this.name = name;\n    this.config = utils.clone(config);\n    this.config.pathname += '/_view/' + this.name;\n  }\n\n  /**\n   * Query the couchdb view with the provided parameters.\n   *\n   * ```js\n   * let results = await view.query({\n   *   group_level: 2,\n   *   startkey: JSON.stringify(['micromatch']),\n   *   endkey: JSON.stringify(['micromatch', {}])\n   * });\n   * ```\n   * @param  {Object} `params` URL query parameters to pass along to the couchdb view.\n   * @return {Promise} Results of the query when promise is resolved.\n   * @name .query\n   * @api public\n   */\n\n  async query(params = {}) {\n    const response = await fetch(this.url(params));\n    if (!response.ok) {\n      throw new Error(response.statusText);\n    }\n    return new Promise((resolve, reject) => {\n      let items = [];\n      let header = {};\n      response.body\n        .pipe(utils.JSONStream.parse('rows.*'))\n        .on('header', (data) => {\n          header = data;\n          if (header.error) {\n            reject(new Error(header.reason || header.error));\n          }\n        })\n        .on('data', (data) => {\n          items.push(data);\n        })\n        .once('error', reject)\n        .once('end', () => {\n          resolve(items);\n        });\n    });\n  }\n\n  /**\n   * Query the couchdb view with the provided parameters and return a stream of results.\n   *\n   * ```js\n   * view.stream({\n   *   group_level: 2,\n   *   startkey: JSON.stringify(['micromatch']),\n   *   endkey: JSON.stringify(['micromatch', {}])\n   * })\n   * .on('data', (data) => {\n   *   console.log(data);\n   * });\n   * ```\n   * @param  {Object} `params` URL query parameters to pass along to the couchdb view.\n   * @return {Stream} Streaming results of the query.\n   * @name .stream\n   * @api public\n   */\n\n  stream(params = {}) {\n    const stream = utils.JSONStream.parse('rows.*');\n    fetch(this.url(params)).then(response => {\n      if (!response.ok) {\n        throw new Error(response.statusText);\n      }\n      response.body.pipe(stream)\n    }).catch(e => stream.emit('error', e))\n    return stream;\n  }\n\n  /**\n   * Build a formatted url with the provided parameters.\n   *\n   * @param  {Object} `query` URL query parameters.\n   * @return {String} formatted url string\n   * @name .url\n   * @api public\n   */\n\n  url(query = {}) {\n    return url.format({ ...this.config, query });\n  }\n}\n\n/**\n * Exposes `View`\n */\n\nmodule.exports = View;\n"]},"metadata":{},"sourceType":"script"}