{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\LPT158\\\\Desktop\\\\New folder\\\\reactpro\\\\src\\\\componet\\\\authentication\\\\index.js\";\nimport React, { Component } from 'react'; // class Testing extends Component {\n//   constructor(props) {\n//     super(props)\n//     this.state = {\n//       inputvalue: '',\n//       data: [],\n//       allChecked: false,\n//     }\n//   }\n//   handleChange = (e) => {\n//     this.setState({\n//       inputvalue: e.target.value,\n//     })\n//   }\n//   addData = (e) => {\n//     const value = this.state.inputvalue\n//     const dobj = Object.assign({ value, checked: false })\n//     this.setState({\n//       data: [...this.state.data, dobj],\n//       inputvalue:''\n//     })\n//   }\n//   handleSingleChange = (e) => {\n//     let dd = this.state.data\n//     dd.forEach((element) => {\n//       if (element.value === e.target.value) {\n//         element.checked = !element.checked\n//       }\n//     })\n//     this.setState({\n//       data: dd,\n//     })\n//   }\n//   handleallCheckbox = (e) => {\n//     let dd = this.state.data\n//     dd.forEach((element) => {\n//       element.checked = !element.checked\n//     })\n//     this.setState({\n//       data: dd,\n//       allChecked: !this.state.allChecked,\n//     })\n//   }\n//   editCase = (row) => {\n//     this.setState({\n//       inputvalue:row.value\n//     })\n//   }\n//   deleteCase = (index) => {\n//     let delArr = [...this.state.data]\n//     delArr.splice(index, 1)\n//     this.setState({\n//       data: delArr,\n//     })\n//   }\n//   saveCase = (index) => {\n//       const arraymodel=[...this.state.data]\n//       arraymodel[index]=this.state.inputvalue\n//       this.setState({\n//         data:arraymodel\n//       })\n//   }\n//   render() {\n//     const { fname, item, data, modal } = this.state\n//     return (\n//       <>\n//         <div className=\"container\">\n//           <div>\n//             <label>Enter Name</label>\n//           </div>\n//           <div>\n//             <input\n//               type=\"text\"\n//               name=\"name\"\n//               value={this.state.inputvalue}\n//               onChange={this.handleChange}\n//             />\n//           </div>\n//           <button onClick={this.addData}>Add</button>\n//         </div>\n//         <input\n//           type=\"checkbox\"\n//           name=\"isChecked\"\n//           value={this.state.allChecked}\n//           onChange={this.handleallCheckbox}\n//         />\n//         <label> All</label>\n//         {data &&\n//           data.map(\n//             (row, index) => (\n//               console.log('row.name', row),\n//               (\n//                 <>\n//                   <tr key={index}>\n//                     <input\n//                       type=\"checkbox\"\n//                       value={row.value}\n//                       onChange={this.handleSingleChange}\n//                       checked={row.checked}\n//                     />\n//                     <label> </label>\n//                     <td>{row.value}</td>\n//                     <td>\n//                       <button onClick={() => this.editCase(row)}>edit</button>\n//                     </td>\n//                     <td>\n//                       <button onClick={() => this.deleteCase(index)}>\n//                         delete\n//                       </button>\n//                     </td>\n//                     <td>\n//                       <button onClick={() => this.saveCase(index)}>save</button>\n//                     </td>\n//                   </tr>\n//                 </>\n//               )\n//             ),\n//           )}\n//       </>\n//     )\n//   }\n// }\n// export default Testing\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass index extends React.Component {\n  constructor(props) {\n    super(props);\n    this.onChange = this.onChange.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n    this.state = {\n      todoList: [],\n      todoString: \"\",\n      editIndex: -1 // init with insert mode.\n\n    };\n  }\n\n  onChange(event) {\n    this.setState({\n      todoString: event.target.value\n    });\n  }\n\n  onSubmit() {\n    let todoList = this.state.todoList;\n\n    if (this.state.editIndex != -1) {\n      // update mode\n      todoList[this.state.editIndex].todoText = this.state.todoString;\n    } else {\n      // insert mode\n      let todoObject = {\n        \"todoText\": this.state.todoString,\n        \"isDone\": false,\n        \"isUpdated\": false\n      };\n      todoList = [...todoList, todoObject];\n    }\n\n    this.setState({\n      todoList: [...todoList],\n      todoString: '',\n      editIndex: -1\n    }); // reset insert mode\n  }\n\n  handleClick(todoItem) {\n    // improved for toggling insted of only mark as done. \n    todoItem.isDone = !todoItem.isDone;\n    this.setState({\n      todoList: [...this.state.todoList]\n    });\n  }\n\n  updatedClick(value) {\n    // set update mode\n    let i = this.state.todoList.findIndex(l => {\n      return l.todoText == value.todoText;\n    });\n    this.setState({\n      editIndex: i,\n      todoString: value.todoText\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          value: this.state.todoString,\n          onChange: e => this.onChange(e)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 17\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: e => this.onSubmit(e),\n          children: \" Add \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 92\n        }, this), this.state.todoList.map((value, index) => {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [value.isDone === true ? /*#__PURE__*/_jsxDEV(\"span\", {\n              style: {\n                'text-decoration': 'line-through',\n                'padding': '10px'\n              },\n              children: value.todoText\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 190,\n              columnNumber: 35\n            }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n              children: value.todoText\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 191,\n              columnNumber: 35\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => this.handleClick(value),\n              children: \" Toggle\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 193,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: e => this.updatedClick(value),\n              children: \" update\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 195,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 29\n          }, this);\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 12\n    }, this);\n  }\n\n}\n\nexport default index;","map":{"version":3,"sources":["C:/Users/LPT158/Desktop/New folder/reactpro/src/componet/authentication/index.js"],"names":["React","Component","index","constructor","props","onChange","bind","onSubmit","handleClick","state","todoList","todoString","editIndex","event","setState","target","value","todoText","todoObject","todoItem","isDone","updatedClick","i","findIndex","l","render","e","map"],"mappings":"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","sourcesContent":["\r\nimport React, { Component } from 'react'\r\n\r\n// class Testing extends Component {\r\n//   constructor(props) {\r\n//     super(props)\r\n//     this.state = {\r\n//       inputvalue: '',\r\n//       data: [],\r\n//       allChecked: false,\r\n//     }\r\n//   }\r\n\r\n//   handleChange = (e) => {\r\n    \r\n//     this.setState({\r\n//       inputvalue: e.target.value,\r\n//     })\r\n//   }\r\n//   addData = (e) => {\r\n//     const value = this.state.inputvalue\r\n//     const dobj = Object.assign({ value, checked: false })\r\n//     this.setState({\r\n//       data: [...this.state.data, dobj],\r\n//       inputvalue:''\r\n//     })\r\n//   }\r\n\r\n//   handleSingleChange = (e) => {\r\n//     let dd = this.state.data\r\n//     dd.forEach((element) => {\r\n//       if (element.value === e.target.value) {\r\n//         element.checked = !element.checked\r\n//       }\r\n//     })\r\n//     this.setState({\r\n//       data: dd,\r\n//     })\r\n//   }\r\n\r\n//   handleallCheckbox = (e) => {\r\n//     let dd = this.state.data\r\n//     dd.forEach((element) => {\r\n//       element.checked = !element.checked\r\n//     })\r\n//     this.setState({\r\n//       data: dd,\r\n//       allChecked: !this.state.allChecked,\r\n//     })\r\n//   }\r\n\r\n//   editCase = (row) => {\r\n//     this.setState({\r\n//       inputvalue:row.value\r\n//     })\r\n//   }\r\n\r\n\r\n\r\n//   deleteCase = (index) => {\r\n//     let delArr = [...this.state.data]\r\n//     delArr.splice(index, 1)\r\n//     this.setState({\r\n//       data: delArr,\r\n//     })\r\n//   }\r\n\r\n//   saveCase = (index) => {\r\n//       const arraymodel=[...this.state.data]\r\n//       arraymodel[index]=this.state.inputvalue\r\n\r\n//       this.setState({\r\n//         data:arraymodel\r\n//       })\r\n\r\n\r\n//   }\r\n\r\n//   render() {\r\n//     const { fname, item, data, modal } = this.state\r\n//     return (\r\n//       <>\r\n//         <div className=\"container\">\r\n//           <div>\r\n//             <label>Enter Name</label>\r\n//           </div>\r\n//           <div>\r\n//             <input\r\n//               type=\"text\"\r\n//               name=\"name\"\r\n//               value={this.state.inputvalue}\r\n//               onChange={this.handleChange}\r\n//             />\r\n//           </div>\r\n//           <button onClick={this.addData}>Add</button>\r\n//         </div>\r\n//         <input\r\n//           type=\"checkbox\"\r\n//           name=\"isChecked\"\r\n//           value={this.state.allChecked}\r\n//           onChange={this.handleallCheckbox}\r\n//         />\r\n//         <label> All</label>\r\n//         {data &&\r\n//           data.map(\r\n//             (row, index) => (\r\n//               console.log('row.name', row),\r\n//               (\r\n//                 <>\r\n//                   <tr key={index}>\r\n//                     <input\r\n//                       type=\"checkbox\"\r\n//                       value={row.value}\r\n//                       onChange={this.handleSingleChange}\r\n//                       checked={row.checked}\r\n//                     />\r\n//                     <label> </label>\r\n//                     <td>{row.value}</td>\r\n//                     <td>\r\n//                       <button onClick={() => this.editCase(row)}>edit</button>\r\n//                     </td>\r\n//                     <td>\r\n//                       <button onClick={() => this.deleteCase(index)}>\r\n//                         delete\r\n//                       </button>\r\n//                     </td>\r\n//                     <td>\r\n//                       <button onClick={() => this.saveCase(index)}>save</button>\r\n//                     </td>\r\n//                   </tr>\r\n//                 </>\r\n//               )\r\n//             ),\r\n//           )}\r\n//       </>\r\n//     )\r\n//   }\r\n// }\r\n// export default Testing\r\nclass index extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.onChange = this.onChange.bind(this);\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n        this.handleClick= this.handleClick.bind(this);\r\n\r\n        this.state={\r\n            todoList:[],\r\n            todoString:\"\",\r\n            editIndex : -1 // init with insert mode.\r\n        }\r\n    };\r\n    onChange(event) { this.setState({todoString:event.target.value}); }\r\n\r\n    onSubmit() {\r\n      let todoList = this.state.todoList;\r\n\r\n      if(this.state.editIndex != -1) { // update mode\r\n        todoList[this.state.editIndex].todoText = this.state.todoString;\r\n      } else { // insert mode\r\n        let todoObject = {\"todoText\" : this.state.todoString, \"isDone\": false, \"isUpdated\":false};\r\n        todoList = [...todoList , todoObject];\r\n      }\r\n\r\n      this.setState({todoList:[...todoList] , todoString:'' , editIndex : -1 }); // reset insert mode\r\n    }\r\n\r\n    handleClick(todoItem) { // improved for toggling insted of only mark as done. \r\n      todoItem.isDone = !todoItem.isDone; \r\n      this.setState({todoList:[...this.state.todoList]}); \r\n    }\r\n\r\n    updatedClick(value) { // set update mode\r\n      let i = this.state.todoList.findIndex(l => {return l.todoText == value.todoText});\r\n      this.setState({editIndex : i, todoString : value.todoText}); \r\n    }\r\n\r\n   render()\r\n   {\r\n       return(\r\n           <div>\r\n            <div>\r\n                <input  value={this.state.todoString} onChange={(e) => this.onChange(e)}/> <button  onClick={(e) =>this.onSubmit(e)}> Add </button>\r\n                {\r\n                    this.state.todoList.map((value, index) => {\r\n                        return(\r\n                            <div>\r\n                                 { \r\n                                  value.isDone === true ? \r\n                                  <span style={{'text-decoration':'line-through','padding':'10px'}}>{value.todoText}</span> : \r\n                                  <span>{value.todoText}</span> }\r\n\r\n                                <button  onClick={()=>this.handleClick(value)}> Toggle</button>\r\n\r\n                                <button  onClick={(e)=>this.updatedClick(value)}> update</button>\r\n\r\n                            </div>\r\n\r\n\r\n\r\n                        )\r\n                    })\r\n                }\r\n\r\n            </div>\r\n           </div>\r\n       )\r\n   }\r\n}\r\nexport default index;"]},"metadata":{},"sourceType":"module"}