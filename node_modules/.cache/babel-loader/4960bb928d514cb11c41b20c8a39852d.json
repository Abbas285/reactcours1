{"ast":null,"code":"'use strict';\n\nconst Base = require('./base');\n\nconst downloads = require('../plugins/downloads');\n/**\n * Repo constructor. Create an instance of an npm repo by repo name.\n *\n * ```js\n * const repo = new Repo('micromatch');\n * ```\n *\n * @param {String} `name` Name of the npm repo to get information about.\n * @name Repo\n * @api public\n */\n\n\nclass Repo extends Base {\n  constructor(name) {\n    super();\n    this.name = name;\n    this.use(downloads());\n  }\n  /**\n   * Get the repo's published package.json.\n   *\n   * ```js\n   * repo.package()\n   *   .then(function(pkg) {\n   *     console.log(pkg);\n   *   }, function(err) {\n   *     console.error(err);\n   *   });\n   * ```\n   * @return {Promise} Returns the package.json object when promise resolves.\n   * @name .package\n   * @api public\n   */\n\n\n  async package() {\n    let version = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'latest';\n    let key = `pkg-${version}`;\n\n    if (!this.cache.has(key)) {\n      let registry = new this.Registry();\n      let results = await registry.get(this.name);\n      let pkg = version === 'all' ? results : results.versions[version] || results.versions[results['dist-tags'][version]];\n      this.cache.set(key, pkg);\n    }\n\n    return this.cache.get(key);\n  }\n  /**\n   * Get the repo's published package.json value for the specified version.\n   *\n   * ```js\n   * repo.version('0.2.0')\n   *   .then(function(pkg) {\n   *     console.log(pkg);\n   *   }, function(err) {\n   *     console.error(err);\n   *   });\n   * ```\n   * @param  {String} `version` Specific version to retrieve.\n   * @return {Promise} Returns the package.json object for the specified version when promise resolves.\n   * @name .version\n   * @api public\n   */\n\n\n  async version(version) {\n    let pkg = await this.package('all');\n\n    if (pkg['dist-tags'][version]) {\n      version = pkg['dist-tags'][version];\n    }\n\n    if (!pkg.versions[version]) {\n      return {};\n    }\n\n    return pkg.versions[version];\n  }\n  /**\n   * Get the repo's dependencies for the specified version.\n   *\n   * ```js\n   * repo.dependencies()\n   *   .then(function(dependencies) {\n   *     console.log(dependencies);\n   *   }, function(err) {\n   *     console.error(err);\n   *   });\n   * ```\n   * @param  {String} `version` Specific version to retrieve. Defaults to `latest`.\n   * @return {Promise} Returns the dependencies object for the specified version when promise resolves.\n   * @name .dependencies\n   * @api public\n   */\n\n\n  dependencies(version) {\n    return this.prop('dependencies', version);\n  }\n  /**\n   * Get the repo's devDependencies for the specified version.\n   *\n   * ```js\n   * repo.devDependencies()\n   *   .then(function(devDependencies) {\n   *     console.log(devDependencies);\n   *   }, function(err) {\n   *     console.error(err);\n   *   });\n   * ```\n   * @param  {String} `version` Specific version to retrieve. Defaults to `latest`.\n   * @return {Promise} Returns the devDependencies object for the specified version when promise resolves.\n   * @name .devDependencies\n   * @api public\n   */\n\n\n  devDependencies(version) {\n    return this.prop('devDependencies', version);\n  }\n  /**\n   * Get the specified property from the repo's package.json for the specified version.\n   *\n   * ```js\n   * repo.prop('author')\n   *   .then(function(author) {\n   *     console.log(author);\n   *   }, function(err) {\n   *     console.error(err);\n   *   });\n   * ```\n   * @param  {String} `prop` Name of the property to get.\n   * @param  {String} `version` Specific version to retrieve. Defaults to `latest`.\n   * @return {Promise} Returns the property for the specified version when promise resolves.\n   * @name .prop\n   * @api public\n   */\n\n\n  async prop(prop) {\n    let version = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'latest';\n    let pkg = await this.version(version);\n    return pkg[prop];\n  }\n\n}\n/**\n * Exposes `Repo`\n */\n\n\nmodule.exports = Repo;","map":{"version":3,"sources":["C:/Users/LPT158/Desktop/project/New folder/reactpro/node_modules/npm-api/lib/models/repo.js"],"names":["Base","require","downloads","Repo","constructor","name","use","package","version","key","cache","has","registry","Registry","results","get","pkg","versions","set","dependencies","prop","devDependencies","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,IAAI,GAAGC,OAAO,CAAC,QAAD,CAApB;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,sBAAD,CAAzB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,MAAME,IAAN,SAAmBH,IAAnB,CAAwB;AACtBI,EAAAA,WAAW,CAACC,IAAD,EAAO;AAChB;AACA,SAAKA,IAAL,GAAYA,IAAZ;AACA,SAAKC,GAAL,CAASJ,SAAS,EAAlB;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEe,QAAPK,OAAO,GAAqB;AAAA,QAApBC,OAAoB,uEAAV,QAAU;AAChC,QAAIC,GAAG,GAAI,OAAMD,OAAQ,EAAzB;;AAEA,QAAI,CAAC,KAAKE,KAAL,CAAWC,GAAX,CAAeF,GAAf,CAAL,EAA0B;AACxB,UAAIG,QAAQ,GAAG,IAAI,KAAKC,QAAT,EAAf;AACA,UAAIC,OAAO,GAAG,MAAMF,QAAQ,CAACG,GAAT,CAAa,KAAKV,IAAlB,CAApB;AACA,UAAIW,GAAG,GAAGR,OAAO,KAAK,KAAZ,GACNM,OADM,GAELA,OAAO,CAACG,QAAR,CAAiBT,OAAjB,KAA6BM,OAAO,CAACG,QAAR,CAAiBH,OAAO,CAAC,WAAD,CAAP,CAAqBN,OAArB,CAAjB,CAFlC;AAIA,WAAKE,KAAL,CAAWQ,GAAX,CAAeT,GAAf,EAAoBO,GAApB;AACD;;AACD,WAAO,KAAKN,KAAL,CAAWK,GAAX,CAAeN,GAAf,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEe,QAAPD,OAAO,CAACA,OAAD,EAAU;AACrB,QAAIQ,GAAG,GAAG,MAAM,KAAKT,OAAL,CAAa,KAAb,CAAhB;;AACA,QAAIS,GAAG,CAAC,WAAD,CAAH,CAAiBR,OAAjB,CAAJ,EAA+B;AAC7BA,MAAAA,OAAO,GAAGQ,GAAG,CAAC,WAAD,CAAH,CAAiBR,OAAjB,CAAV;AACD;;AACD,QAAI,CAACQ,GAAG,CAACC,QAAJ,CAAaT,OAAb,CAAL,EAA4B;AAC1B,aAAO,EAAP;AACD;;AACD,WAAOQ,GAAG,CAACC,QAAJ,CAAaT,OAAb,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEEW,EAAAA,YAAY,CAACX,OAAD,EAAU;AACpB,WAAO,KAAKY,IAAL,CAAU,cAAV,EAA0BZ,OAA1B,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEEa,EAAAA,eAAe,CAACb,OAAD,EAAU;AACvB,WAAO,KAAKY,IAAL,CAAU,iBAAV,EAA6BZ,OAA7B,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEY,QAAJY,IAAI,CAACA,IAAD,EAA2B;AAAA,QAApBZ,OAAoB,uEAAV,QAAU;AACnC,QAAIQ,GAAG,GAAG,MAAM,KAAKR,OAAL,CAAaA,OAAb,CAAhB;AACA,WAAOQ,GAAG,CAACI,IAAD,CAAV;AACD;;AAjIqB;AAoIxB;AACA;AACA;;;AAEAE,MAAM,CAACC,OAAP,GAAiBpB,IAAjB","sourcesContent":["'use strict';\n\nconst Base = require('./base');\nconst downloads = require('../plugins/downloads');\n\n/**\n * Repo constructor. Create an instance of an npm repo by repo name.\n *\n * ```js\n * const repo = new Repo('micromatch');\n * ```\n *\n * @param {String} `name` Name of the npm repo to get information about.\n * @name Repo\n * @api public\n */\n\nclass Repo extends Base {\n  constructor(name) {\n    super();\n    this.name = name;\n    this.use(downloads());\n  }\n\n  /**\n   * Get the repo's published package.json.\n   *\n   * ```js\n   * repo.package()\n   *   .then(function(pkg) {\n   *     console.log(pkg);\n   *   }, function(err) {\n   *     console.error(err);\n   *   });\n   * ```\n   * @return {Promise} Returns the package.json object when promise resolves.\n   * @name .package\n   * @api public\n   */\n\n  async package(version = 'latest') {\n    let key = `pkg-${version}`;\n\n    if (!this.cache.has(key)) {\n      let registry = new this.Registry();\n      let results = await registry.get(this.name);\n      let pkg = version === 'all'\n        ? results\n        : (results.versions[version] || results.versions[results['dist-tags'][version]]);\n\n      this.cache.set(key, pkg);\n    }\n    return this.cache.get(key);\n  }\n\n  /**\n   * Get the repo's published package.json value for the specified version.\n   *\n   * ```js\n   * repo.version('0.2.0')\n   *   .then(function(pkg) {\n   *     console.log(pkg);\n   *   }, function(err) {\n   *     console.error(err);\n   *   });\n   * ```\n   * @param  {String} `version` Specific version to retrieve.\n   * @return {Promise} Returns the package.json object for the specified version when promise resolves.\n   * @name .version\n   * @api public\n   */\n\n  async version(version) {\n    let pkg = await this.package('all');\n    if (pkg['dist-tags'][version]) {\n      version = pkg['dist-tags'][version];\n    }\n    if (!pkg.versions[version]) {\n      return {};\n    }\n    return pkg.versions[version];\n  }\n\n  /**\n   * Get the repo's dependencies for the specified version.\n   *\n   * ```js\n   * repo.dependencies()\n   *   .then(function(dependencies) {\n   *     console.log(dependencies);\n   *   }, function(err) {\n   *     console.error(err);\n   *   });\n   * ```\n   * @param  {String} `version` Specific version to retrieve. Defaults to `latest`.\n   * @return {Promise} Returns the dependencies object for the specified version when promise resolves.\n   * @name .dependencies\n   * @api public\n   */\n\n  dependencies(version) {\n    return this.prop('dependencies', version);\n  }\n\n  /**\n   * Get the repo's devDependencies for the specified version.\n   *\n   * ```js\n   * repo.devDependencies()\n   *   .then(function(devDependencies) {\n   *     console.log(devDependencies);\n   *   }, function(err) {\n   *     console.error(err);\n   *   });\n   * ```\n   * @param  {String} `version` Specific version to retrieve. Defaults to `latest`.\n   * @return {Promise} Returns the devDependencies object for the specified version when promise resolves.\n   * @name .devDependencies\n   * @api public\n   */\n\n  devDependencies(version) {\n    return this.prop('devDependencies', version);\n  }\n\n  /**\n   * Get the specified property from the repo's package.json for the specified version.\n   *\n   * ```js\n   * repo.prop('author')\n   *   .then(function(author) {\n   *     console.log(author);\n   *   }, function(err) {\n   *     console.error(err);\n   *   });\n   * ```\n   * @param  {String} `prop` Name of the property to get.\n   * @param  {String} `version` Specific version to retrieve. Defaults to `latest`.\n   * @return {Promise} Returns the property for the specified version when promise resolves.\n   * @name .prop\n   * @api public\n   */\n\n  async prop(prop, version = 'latest') {\n    let pkg = await this.version(version);\n    return pkg[prop];\n  }\n}\n\n/**\n * Exposes `Repo`\n */\n\nmodule.exports = Repo;\n"]},"metadata":{},"sourceType":"script"}