{"ast":null,"code":"'use strict';\n\nconst url = require('url');\n\nconst fetch = require('node-fetch');\n\nconst utils = require('./utils');\n\nconst config = require('./config');\n/**\n * List constructor. Create an instance of a list associated with a couchdb list in the npm registry.\n *\n * ```js\n * let list = new List('dependedUpon', view);\n * ```\n *\n * @param {String} `name` Name of couchdb list to use.\n * @param {Object} `view` Instance of a View to use with the list.\n * @returns {Object} instance of `List`\n * @name List\n * @api public\n */\n\n\nclass List {\n  constructor(name, view) {\n    this.name = name;\n    this.view = view;\n    this.config = utils.clone(config);\n    this.config.pathname += '/_list/' + this.view.name + '/' + this.name;\n  }\n  /**\n   * Query the couchdb list with the provided parameters.\n   *\n   * ```js\n   * let results = await list.query({ key: JSON.stringify(['micromatch']) })\n   * ```\n   * @param  {Object} `params` URL query parameters to pass along to the couchdb list.\n   * @return {Promise} Results of the query when promise is resolved.\n   * @name .query\n   * @api public\n   */\n\n\n  async query() {\n    let params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const response = await fetch(this.url(params));\n\n    if (!response.ok) {\n      throw new Error(response.statusText);\n    }\n\n    return response.json();\n  }\n  /**\n   * Build a formatted url with the provided parameters.\n   *\n   * @param  {Object} `query` URL query parameters.\n   * @return {String} formatted url string\n   * @name .url\n   * @api public\n   */\n\n\n  url() {\n    let query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return url.format({ ...this.config,\n      query\n    });\n  }\n\n}\n/**\n * Exposes `List`\n */\n\n\nmodule.exports = List;","map":{"version":3,"sources":["C:/Users/LPT158/Desktop/project/New folder/reactpro/node_modules/npm-api/lib/list.js"],"names":["url","require","fetch","utils","config","List","constructor","name","view","clone","pathname","query","params","response","ok","Error","statusText","json","format","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,GAAG,GAAGC,OAAO,CAAC,KAAD,CAAnB;;AACA,MAAMC,KAAK,GAAGD,OAAO,CAAC,YAAD,CAArB;;AACA,MAAME,KAAK,GAAGF,OAAO,CAAC,SAAD,CAArB;;AACA,MAAMG,MAAM,GAAGH,OAAO,CAAC,UAAD,CAAtB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,MAAMI,IAAN,CAAW;AACTC,EAAAA,WAAW,CAACC,IAAD,EAAOC,IAAP,EAAa;AACtB,SAAKD,IAAL,GAAYA,IAAZ;AACA,SAAKC,IAAL,GAAYA,IAAZ;AACA,SAAKJ,MAAL,GAAcD,KAAK,CAACM,KAAN,CAAYL,MAAZ,CAAd;AACA,SAAKA,MAAL,CAAYM,QAAZ,IAAwB,YAAY,KAAKF,IAAL,CAAUD,IAAtB,GAA6B,GAA7B,GAAmC,KAAKA,IAAhE;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEa,QAALI,KAAK,GAAc;AAAA,QAAbC,MAAa,uEAAJ,EAAI;AACvB,UAAMC,QAAQ,GAAG,MAAMX,KAAK,CAAC,KAAKF,GAAL,CAASY,MAAT,CAAD,CAA5B;;AACA,QAAI,CAACC,QAAQ,CAACC,EAAd,EAAkB;AAChB,YAAM,IAAIC,KAAJ,CAAUF,QAAQ,CAACG,UAAnB,CAAN;AACD;;AACD,WAAOH,QAAQ,CAACI,IAAT,EAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEEjB,EAAAA,GAAG,GAAa;AAAA,QAAZW,KAAY,uEAAJ,EAAI;AACd,WAAOX,GAAG,CAACkB,MAAJ,CAAW,EAAE,GAAG,KAAKd,MAAV;AAAkBO,MAAAA;AAAlB,KAAX,CAAP;AACD;;AAvCQ;AA0CX;AACA;AACA;;;AAEAQ,MAAM,CAACC,OAAP,GAAiBf,IAAjB","sourcesContent":["'use strict';\n\nconst url = require('url');\nconst fetch = require('node-fetch');\nconst utils = require('./utils');\nconst config = require('./config');\n\n/**\n * List constructor. Create an instance of a list associated with a couchdb list in the npm registry.\n *\n * ```js\n * let list = new List('dependedUpon', view);\n * ```\n *\n * @param {String} `name` Name of couchdb list to use.\n * @param {Object} `view` Instance of a View to use with the list.\n * @returns {Object} instance of `List`\n * @name List\n * @api public\n */\n\nclass List {\n  constructor(name, view) {\n    this.name = name;\n    this.view = view;\n    this.config = utils.clone(config);\n    this.config.pathname += '/_list/' + this.view.name + '/' + this.name;\n  }\n\n  /**\n   * Query the couchdb list with the provided parameters.\n   *\n   * ```js\n   * let results = await list.query({ key: JSON.stringify(['micromatch']) })\n   * ```\n   * @param  {Object} `params` URL query parameters to pass along to the couchdb list.\n   * @return {Promise} Results of the query when promise is resolved.\n   * @name .query\n   * @api public\n   */\n\n  async query(params = {}) {\n    const response = await fetch(this.url(params));\n    if (!response.ok) {\n      throw new Error(response.statusText);\n    }\n    return response.json();\n  }\n\n  /**\n   * Build a formatted url with the provided parameters.\n   *\n   * @param  {Object} `query` URL query parameters.\n   * @return {String} formatted url string\n   * @name .url\n   * @api public\n   */\n\n  url(query = {}) {\n    return url.format({ ...this.config, query });\n  }\n}\n\n/**\n * Exposes `List`\n */\n\nmodule.exports = List;\n"]},"metadata":{},"sourceType":"script"}