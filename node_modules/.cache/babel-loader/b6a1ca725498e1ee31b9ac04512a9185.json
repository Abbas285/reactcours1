{"ast":null,"code":"'use strict';\n\nvar utils = require('./utils');\n\nvar calculate = module.exports = {};\n/**\n * Group array into object where keys are groups and values are arrays.\n * Groups determined by provided `fn`.\n *\n * ```js\n * var groups = calculate.group(downloads, function(download) {\n *   // day is formatted as '2010-12-25'\n *   // add this download to the '2010-12' group\n *   return download.day.substr(0, 7);\n * });\n * ```\n * @param  {Array} `arr` Array of download objects\n * @param  {Function} `fn` Function to determine group the download belongs in.\n * @return {String} Key to use for the group\n * @api public\n */\n\ncalculate.group = function (arr, fn) {\n  var groups = {};\n  var len = arr.length,\n      i = 0;\n\n  while (len--) {\n    var download = arr[i++];\n    var groupArr = utils.arrayify(fn(download));\n    groupArr.reduce(function (acc, group) {\n      if (typeof group === 'string') {\n        group = {\n          name: group\n        };\n      }\n\n      acc[group.name] = acc[group.name] || group;\n      acc[group.name].downloads = acc[group.name].downloads || [];\n      acc[group.name].downloads.push(download);\n      return acc;\n    }, groups);\n  }\n\n  return groups;\n};\n/**\n * Calculate the total for each group (key) in the object.\n *\n * @name group.total\n * @param  {Object} `groups` Object created by a `group` function.\n * @return {Object} Object with calculated totals\n * @api public\n */\n\n\ncalculate.group.total = function (groups) {\n  var res = {};\n  var keys = Object.keys(groups);\n  var len = keys.length,\n      i = 0;\n\n  while (len--) {\n    var key = keys[i++];\n    var group = groups[key];\n\n    if (Array.isArray(group)) {\n      res[key] = calculate.total(group);\n    } else {\n      res[key] = calculate.total(group.downloads);\n    }\n  }\n\n  return res;\n};\n/**\n * Calculate the total downloads for an array of download objects.\n *\n * @param  {Array} `arr` Array of download objects (must have a `.downloads` property)\n * @return {Number} Total of all downloads in the array.\n * @api public\n */\n\n\ncalculate.total = function (arr) {\n  arr = utils.arrayify(arr);\n  var len = arr.length,\n      i = 0;\n  var total = 0;\n\n  while (len--) total += arr[i++].downloads || 0;\n\n  return total;\n};\n/**\n * Calculate the average for each group (key) in the object.\n *\n * @name group.avg\n * @param  {Object} `groups` Object created by a `group` function.\n * @return {Object} Object with calculated average\n * @api public\n */\n\n\ncalculate.group.avg = function (groups, days) {\n  var res = {};\n  var keys = Object.keys(groups);\n  var len = keys.length,\n      i = 0;\n\n  while (len--) {\n    var key = keys[i++];\n    res[key] = calculate.avg(groups[key], days);\n  }\n\n  return res;\n};\n/**\n * Calculate the average downloads for an array of download objects.\n *\n * @param  {Array} `arr` Array of download objects (must have a `.downloads` property)\n * @return {Number} Average of all downloads in the array.\n * @api public\n */\n\n\ncalculate.avg = function (arr, days) {\n  arr = utils.arrayify(arr);\n  var len = arr.length,\n      i = 0;\n  var total = 0;\n\n  while (len--) {\n    total += arr[i++].downloads || 0;\n  }\n\n  if (typeof days === 'undefined' || days === 0) {\n    days = arr.length;\n  }\n\n  return total / days;\n};\n/**\n * Create an array of downloads before specified day.\n *\n * @name group.before\n * @param  {String} `day` Day specifying last day to use in group.\n * @param  {Array} `arr` Array of downloads to check.\n * @return {Array} Array of downloads happened before or on specified day.\n * @api public\n */\n\n\ncalculate.group.before = function (day, arr) {\n  var end = utils.format(normalizeDate(utils.moment(day)));\n  var group = [];\n  var len = arr.length,\n      i = 0;\n\n  while (len--) {\n    var download = arr[i++];\n\n    if (download.day <= end) {\n      group.push(download);\n    }\n  }\n\n  return group;\n};\n/**\n * Calculate the total downloads happening before the specified day.\n *\n * @param  {String} `day` Day specifying last day to use in group.\n * @param  {Array} `arr` Array of downloads to check.\n * @return {Number} Total downloads happening before or on specified day.\n * @api public\n */\n\n\ncalculate.before = function (day, arr) {\n  var group = calculate.group.before(day, arr);\n  return calculate.total(group);\n};\n/**\n * Create an array of downloads for the last `X` days.\n *\n * @name group.last\n * @param  {Number} `days` Number of days to go back.\n * @param  {Array} `arr` Array of downloads to check.\n * @param {String} `init` Optional day to use as the last day to include. (Days from `init || today` - `days` to `init || today`)\n * @return {Array} Array of downloads for last `X` days.\n * @api public\n */\n\n\ncalculate.group.last = function (days, arr, init) {\n  var today = init ? utils.moment.utc(init) : utils.moment.utc();\n  var start = utils.moment.utc(today);\n  start.subtract(days, 'days');\n  today = utils.format(today);\n  start = utils.format(start);\n  var group = [];\n  var len = arr.length,\n      i = 0;\n\n  while (len--) {\n    var download = arr[i++];\n\n    if (download.day > start && download.day <= today) {\n      group.push(download);\n    }\n  }\n\n  return group;\n};\n/**\n * Calculate total downloads for the last `X` days.\n *\n * @name last\n * @param  {Number} `days` Number of days to go back.\n * @param  {Array} `arr` Array of downloads to check.\n * @param {String} `init` Optional day to use as the last day to include. (Days from `init || today` - `days` to `init || today`)\n * @return {Array} Array of downloads for last `X` days.\n * @api public\n */\n\n\ncalculate.last = function (days, arr, init) {\n  var group = calculate.group.last(days, arr, init);\n  return calculate.total(group);\n};\n/**\n * Create an array of downloads for the previous `X` days.\n *\n * @name group.prev\n * @param  {Number} `days` Number of days to go back.\n * @param  {Array} `arr` Array of downloads to check.\n * @param {String} `init` Optional day to use as the prev day to include. (Days from `init || today` - `days` - `days` to `init || today` - `days`)\n * @return {Array} Array of downloads for prev `X` days.\n * @api public\n */\n\n\ncalculate.group.prev = function (days, arr, init) {\n  var today = init ? utils.moment(init) : utils.moment();\n  var end = utils.moment(today);\n  end.subtract(days, 'days');\n  return calculate.group.last(days, arr, end);\n};\n/**\n * Calculate total downloads for the previous `X` days.\n *\n * @name prev\n * @param  {Number} `days` Number of days to go back.\n * @param  {Array} `arr` Array of downloads to check.\n * @param {String} `init` Optional day to use as the prev day to include. (Days from `init || today` - `days` - `days` to `init || today` - `days`)\n * @return {Array} Array of downloads for prev `X` days.\n * @api public\n */\n\n\ncalculate.prev = function (days, arr, init) {\n  var group = calculate.group.prev(days, arr, init);\n  return calculate.total(group);\n};\n/**\n * Create an object of download groups by month.\n *\n * @param  {Array} `arr` Array of downloads to group and total.\n * @return {Object} Groups with arrays of download objects\n * @api public\n */\n\n\ncalculate.group.monthly = function (arr) {\n  return calculate.group(arr, function (download) {\n    return download.day.substr(0, 7);\n  });\n};\n\nfunction normalizeDate(date) {\n  date.utc().hour(0);\n  date.utc().minute(0);\n  date.utc().second(0);\n  return date;\n}\n\ncalculate.group.window = function (days, arr, init) {\n  var today = init ? utils.moment(init) : normalizeDate(utils.moment());\n  arr = calculate.group.before(today, arr);\n  return calculate.group(arr, function (download) {\n    var day = utils.moment.utc(download.day);\n    var diff = day.diff(today, 'days');\n    var period = Math.floor(diff * -1 / days);\n    var start = utils.moment(today);\n    start.subtract((period + 1) * days, 'days');\n    return {\n      name: period,\n      period: utils.format(start)\n    };\n  });\n};\n/**\n * Calculate total downloads grouped by month.\n *\n * @param  {Array} `arr` Array of downloads to group and total.\n * @return {Object} Groups with total downloads calculated\n * @api public\n */\n\n\ncalculate.monthly = function (arr) {\n  var months = calculate.group.monthly(arr);\n  return calculate.group.total(months);\n};\n/**\n * Create an object of download groups by month.\n *\n * @param  {Array} `arr` Array of downloads to group and total.\n * @return {Object} Groups with arrays of download objects\n * @api public\n */\n\n\ncalculate.group.yearly = function (arr) {\n  return calculate.group(arr, function (download) {\n    return download.day.substr(0, 4);\n  });\n};\n/**\n * Calculate total downloads grouped by year.\n *\n * @param  {Array} `arr` Array of downloads to group and total.\n * @return {Object} Groups with total downloads calculated\n * @api public\n */\n\n\ncalculate.yearly = function (arr) {\n  var years = calculate.group.yearly(arr);\n  return calculate.group.total(years);\n};","map":{"version":3,"sources":["C:/Users/LPT158/Desktop/project/New folder/reactpro/node_modules/download-stats/lib/calculate.js"],"names":["utils","require","calculate","module","exports","group","arr","fn","groups","len","length","i","download","groupArr","arrayify","reduce","acc","name","downloads","push","total","res","keys","Object","key","Array","isArray","avg","days","before","day","end","format","normalizeDate","moment","last","init","today","utc","start","subtract","prev","monthly","substr","date","hour","minute","second","window","diff","period","Math","floor","months","yearly","years"],"mappings":"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","sourcesContent":["'use strict';\n\nvar utils = require('./utils');\n\nvar calculate = module.exports = {};\n\n/**\n * Group array into object where keys are groups and values are arrays.\n * Groups determined by provided `fn`.\n *\n * ```js\n * var groups = calculate.group(downloads, function(download) {\n *   // day is formatted as '2010-12-25'\n *   // add this download to the '2010-12' group\n *   return download.day.substr(0, 7);\n * });\n * ```\n * @param  {Array} `arr` Array of download objects\n * @param  {Function} `fn` Function to determine group the download belongs in.\n * @return {String} Key to use for the group\n * @api public\n */\n\ncalculate.group = function(arr, fn) {\n  var groups = {};\n  var len = arr.length, i = 0;\n  while (len--) {\n    var download = arr[i++];\n    var groupArr = utils.arrayify(fn(download));\n    groupArr.reduce(function(acc, group) {\n      if (typeof group === 'string') {\n        group = { name: group };\n      }\n      acc[group.name] = acc[group.name] || group;\n      acc[group.name].downloads = acc[group.name].downloads || [];\n      acc[group.name].downloads.push(download);\n      return acc;\n    }, groups);\n  }\n  return groups;\n};\n\n/**\n * Calculate the total for each group (key) in the object.\n *\n * @name group.total\n * @param  {Object} `groups` Object created by a `group` function.\n * @return {Object} Object with calculated totals\n * @api public\n */\n\ncalculate.group.total = function(groups) {\n  var res = {};\n  var keys = Object.keys(groups);\n  var len = keys.length, i = 0;\n  while (len--) {\n    var key = keys[i++];\n    var group = groups[key];\n    if (Array.isArray(group)) {\n      res[key] = calculate.total(group);\n    } else {\n      res[key] = calculate.total(group.downloads);\n    }\n  }\n  return res;\n};\n\n/**\n * Calculate the total downloads for an array of download objects.\n *\n * @param  {Array} `arr` Array of download objects (must have a `.downloads` property)\n * @return {Number} Total of all downloads in the array.\n * @api public\n */\n\ncalculate.total = function(arr) {\n  arr = utils.arrayify(arr);\n  var len = arr.length, i = 0;\n  var total = 0;\n  while (len--) total += arr[i++].downloads || 0;\n  return total;\n};\n\n/**\n * Calculate the average for each group (key) in the object.\n *\n * @name group.avg\n * @param  {Object} `groups` Object created by a `group` function.\n * @return {Object} Object with calculated average\n * @api public\n */\n\ncalculate.group.avg = function(groups, days) {\n  var res = {};\n  var keys = Object.keys(groups);\n  var len = keys.length, i = 0;\n  while (len--) {\n    var key = keys[i++];\n    res[key] = calculate.avg(groups[key], days);\n  }\n  return res;\n};\n\n/**\n * Calculate the average downloads for an array of download objects.\n *\n * @param  {Array} `arr` Array of download objects (must have a `.downloads` property)\n * @return {Number} Average of all downloads in the array.\n * @api public\n */\n\ncalculate.avg = function(arr, days) {\n  arr = utils.arrayify(arr);\n  var len = arr.length, i = 0;\n  var total = 0;\n  while (len--) {\n    total += arr[i++].downloads || 0;\n  }\n\n  if (typeof days === 'undefined' || days === 0) {\n    days = arr.length;\n  }\n  return total / days;\n};\n\n/**\n * Create an array of downloads before specified day.\n *\n * @name group.before\n * @param  {String} `day` Day specifying last day to use in group.\n * @param  {Array} `arr` Array of downloads to check.\n * @return {Array} Array of downloads happened before or on specified day.\n * @api public\n */\n\ncalculate.group.before = function(day, arr) {\n  var end = utils.format(normalizeDate(utils.moment(day)));\n  var group = [];\n  var len = arr.length, i = 0;\n  while (len--) {\n    var download = arr[i++];\n    if (download.day <= end) {\n      group.push(download);\n    }\n  }\n  return group;\n};\n\n/**\n * Calculate the total downloads happening before the specified day.\n *\n * @param  {String} `day` Day specifying last day to use in group.\n * @param  {Array} `arr` Array of downloads to check.\n * @return {Number} Total downloads happening before or on specified day.\n * @api public\n */\n\ncalculate.before = function(day, arr) {\n  var group = calculate.group.before(day, arr);\n  return calculate.total(group);\n};\n\n/**\n * Create an array of downloads for the last `X` days.\n *\n * @name group.last\n * @param  {Number} `days` Number of days to go back.\n * @param  {Array} `arr` Array of downloads to check.\n * @param {String} `init` Optional day to use as the last day to include. (Days from `init || today` - `days` to `init || today`)\n * @return {Array} Array of downloads for last `X` days.\n * @api public\n */\n\ncalculate.group.last = function(days, arr, init) {\n  var today = init ? utils.moment.utc(init) : utils.moment.utc();\n  var start = utils.moment.utc(today);\n  start.subtract(days, 'days')\n  today = utils.format(today);\n  start = utils.format(start);\n\n  var group = [];\n  var len = arr.length, i = 0;\n  while (len--) {\n    var download = arr[i++];\n    if (download.day > start && download.day <= today) {\n      group.push(download);\n    }\n  }\n  return group;\n};\n\n/**\n * Calculate total downloads for the last `X` days.\n *\n * @name last\n * @param  {Number} `days` Number of days to go back.\n * @param  {Array} `arr` Array of downloads to check.\n * @param {String} `init` Optional day to use as the last day to include. (Days from `init || today` - `days` to `init || today`)\n * @return {Array} Array of downloads for last `X` days.\n * @api public\n */\n\ncalculate.last = function(days, arr, init) {\n  var group = calculate.group.last(days, arr, init);\n  return calculate.total(group);\n};\n\n/**\n * Create an array of downloads for the previous `X` days.\n *\n * @name group.prev\n * @param  {Number} `days` Number of days to go back.\n * @param  {Array} `arr` Array of downloads to check.\n * @param {String} `init` Optional day to use as the prev day to include. (Days from `init || today` - `days` - `days` to `init || today` - `days`)\n * @return {Array} Array of downloads for prev `X` days.\n * @api public\n */\n\ncalculate.group.prev = function(days, arr, init) {\n  var today = init ? utils.moment(init) : utils.moment();\n  var end = utils.moment(today);\n  end.subtract(days, 'days');\n  return calculate.group.last(days, arr, end);\n};\n\n/**\n * Calculate total downloads for the previous `X` days.\n *\n * @name prev\n * @param  {Number} `days` Number of days to go back.\n * @param  {Array} `arr` Array of downloads to check.\n * @param {String} `init` Optional day to use as the prev day to include. (Days from `init || today` - `days` - `days` to `init || today` - `days`)\n * @return {Array} Array of downloads for prev `X` days.\n * @api public\n */\n\ncalculate.prev = function(days, arr, init) {\n  var group = calculate.group.prev(days, arr, init);\n  return calculate.total(group);\n};\n\n/**\n * Create an object of download groups by month.\n *\n * @param  {Array} `arr` Array of downloads to group and total.\n * @return {Object} Groups with arrays of download objects\n * @api public\n */\n\ncalculate.group.monthly = function(arr) {\n  return calculate.group(arr, function(download) {\n    return download.day.substr(0, 7);\n  });\n};\n\nfunction normalizeDate(date) {\n  date.utc().hour(0);\n  date.utc().minute(0);\n  date.utc().second(0);\n  return date;\n}\n\ncalculate.group.window = function(days, arr, init) {\n  var today = init ? utils.moment(init) : normalizeDate(utils.moment());\n  arr = calculate.group.before(today, arr);\n  return calculate.group(arr, function(download) {\n    var day = utils.moment.utc(download.day);\n    var diff = day.diff(today, 'days');\n    var period = Math.floor((diff * -1) / days);\n    var start = utils.moment(today);\n    start.subtract((period + 1) * days, 'days');\n    return {\n      name: period,\n      period: utils.format(start)\n    };\n  });\n};\n\n/**\n * Calculate total downloads grouped by month.\n *\n * @param  {Array} `arr` Array of downloads to group and total.\n * @return {Object} Groups with total downloads calculated\n * @api public\n */\n\ncalculate.monthly = function(arr) {\n  var months = calculate.group.monthly(arr);\n  return calculate.group.total(months);\n};\n\n/**\n * Create an object of download groups by month.\n *\n * @param  {Array} `arr` Array of downloads to group and total.\n * @return {Object} Groups with arrays of download objects\n * @api public\n */\ncalculate.group.yearly = function(arr) {\n  return calculate.group(arr, function(download) {\n    return download.day.substr(0, 4);\n  });\n};\n\n/**\n * Calculate total downloads grouped by year.\n *\n * @param  {Array} `arr` Array of downloads to group and total.\n * @return {Object} Groups with total downloads calculated\n * @api public\n */\n\ncalculate.yearly = function(arr) {\n  var years = calculate.group.yearly(arr);\n  return calculate.group.total(years);\n};\n"]},"metadata":{},"sourceType":"script"}