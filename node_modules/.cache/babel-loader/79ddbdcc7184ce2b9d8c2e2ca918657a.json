{"ast":null,"code":"'use strict';\n\nconst axios = require('axios');\n\nmodule.exports = async function (url, options, next) {\n  if (typeof url !== 'string') {\n    return Promise.reject(new TypeError('expected \"url\" to be a string'));\n  }\n\n  if (typeof options === 'function') {\n    next = options;\n    options = null;\n  }\n\n  const opts = Object.assign({}, options);\n  const acc = {\n    orig: url,\n    options,\n    pages: [],\n    urls: []\n  };\n  let res;\n\n  while (url && typeof url === 'string' && !acc.urls.includes(url)) {\n    acc.urls.push(url);\n    res = await axios.get(url, opts);\n    url = await next(url, res, acc);\n    acc.pages.push(res);\n  }\n\n  return acc;\n};","map":{"version":3,"sources":["C:/Users/LPT158/Desktop/project/New folder/reactpro/node_modules/paged-request/index.js"],"names":["axios","require","module","exports","url","options","next","Promise","reject","TypeError","opts","Object","assign","acc","orig","pages","urls","res","includes","push","get"],"mappings":"AAAA;;AAEA,MAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AAEAC,MAAM,CAACC,OAAP,GAAiB,gBAAeC,GAAf,EAAoBC,OAApB,EAA6BC,IAA7B,EAAmC;AAClD,MAAI,OAAOF,GAAP,KAAe,QAAnB,EAA6B;AAC3B,WAAOG,OAAO,CAACC,MAAR,CAAe,IAAIC,SAAJ,CAAc,+BAAd,CAAf,CAAP;AACD;;AAED,MAAI,OAAOJ,OAAP,KAAmB,UAAvB,EAAmC;AACjCC,IAAAA,IAAI,GAAGD,OAAP;AACAA,IAAAA,OAAO,GAAG,IAAV;AACD;;AAED,QAAMK,IAAI,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBP,OAAlB,CAAb;AACA,QAAMQ,GAAG,GAAG;AAAEC,IAAAA,IAAI,EAAEV,GAAR;AAAaC,IAAAA,OAAb;AAAsBU,IAAAA,KAAK,EAAE,EAA7B;AAAiCC,IAAAA,IAAI,EAAE;AAAvC,GAAZ;AACA,MAAIC,GAAJ;;AAEA,SAAOb,GAAG,IAAI,OAAOA,GAAP,KAAe,QAAtB,IAAkC,CAACS,GAAG,CAACG,IAAJ,CAASE,QAAT,CAAkBd,GAAlB,CAA1C,EAAkE;AAChES,IAAAA,GAAG,CAACG,IAAJ,CAASG,IAAT,CAAcf,GAAd;AACAa,IAAAA,GAAG,GAAG,MAAMjB,KAAK,CAACoB,GAAN,CAAUhB,GAAV,EAAeM,IAAf,CAAZ;AACAN,IAAAA,GAAG,GAAG,MAAME,IAAI,CAACF,GAAD,EAAMa,GAAN,EAAWJ,GAAX,CAAhB;AACAA,IAAAA,GAAG,CAACE,KAAJ,CAAUI,IAAV,CAAeF,GAAf;AACD;;AAED,SAAOJ,GAAP;AACD,CAtBD","sourcesContent":["'use strict';\n\nconst axios = require('axios');\n\nmodule.exports = async function(url, options, next) {\n  if (typeof url !== 'string') {\n    return Promise.reject(new TypeError('expected \"url\" to be a string'));\n  }\n\n  if (typeof options === 'function') {\n    next = options;\n    options = null;\n  }\n\n  const opts = Object.assign({}, options);\n  const acc = { orig: url, options, pages: [], urls: [] };\n  let res;\n\n  while (url && typeof url === 'string' && !acc.urls.includes(url)) {\n    acc.urls.push(url);\n    res = await axios.get(url, opts);\n    url = await next(url, res, acc);\n    acc.pages.push(res);\n  }\n\n  return acc;\n};\n"]},"metadata":{},"sourceType":"script"}