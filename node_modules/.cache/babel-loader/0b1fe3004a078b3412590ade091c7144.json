{"ast":null,"code":"'use strict';\n\nconst fetch = require('node-fetch');\n\nconst utils = require('./utils');\n\nconst config = require('./config');\n/**\n * Registry constructor. Create an instance of a registry for querying registry.npmjs.org directly.\n *\n * ```js\n * const registry = new Registry();\n * ```\n *\n * @returns {Object} instance of `Registry`\n * @name Registry\n * @api public\n */\n\n\nclass Registry {\n  constructor() {\n    this.config = utils.clone(config);\n  }\n  /**\n   * Get the package.json for the specified repository.\n   *\n   * ```js\n   * let results = await registry.get('micromatch')\n   * ```\n   * @param  {String} `name` Repository name to get.\n   * @return {Promise} Results of the query when promise is resolved.\n   * @name .get\n   * @api public\n   */\n\n\n  async get(name) {\n    const response = await fetch(this.url(name));\n\n    if (!response.ok) {\n      throw new Error(response.statusText);\n    }\n\n    return response.json();\n  }\n  /**\n   * Build a formatted url\n   *\n   * @param  {String} `name` Repo name.\n   * @return {String} formatted url string\n   * @name .url\n   * @api public\n   */\n\n\n  url(name) {\n    if (name[0] === '@' && name.indexOf('/') !== -1) {\n      name = '@' + encodeURIComponent(name.slice(1));\n    }\n\n    return this.config.registry + name;\n  }\n\n}\n/**\n * Exposes `Registry`\n */\n\n\nmodule.exports = Registry;","map":{"version":3,"sources":["C:/Users/LPT158/Desktop/project/New folder/reactpro/node_modules/npm-api/lib/registry.js"],"names":["fetch","require","utils","config","Registry","constructor","clone","get","name","response","url","ok","Error","statusText","json","indexOf","encodeURIComponent","slice","registry","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,KAAK,GAAGC,OAAO,CAAC,YAAD,CAArB;;AACA,MAAMC,KAAK,GAAGD,OAAO,CAAC,SAAD,CAArB;;AACA,MAAME,MAAM,GAAGF,OAAO,CAAC,UAAD,CAAtB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,MAAMG,QAAN,CAAe;AACbC,EAAAA,WAAW,GAAG;AACZ,SAAKF,MAAL,GAAcD,KAAK,CAACI,KAAN,CAAYH,MAAZ,CAAd;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEW,QAAHI,GAAG,CAACC,IAAD,EAAO;AACd,UAAMC,QAAQ,GAAG,MAAMT,KAAK,CAAC,KAAKU,GAAL,CAASF,IAAT,CAAD,CAA5B;;AACA,QAAI,CAACC,QAAQ,CAACE,EAAd,EAAkB;AAChB,YAAM,IAAIC,KAAJ,CAAUH,QAAQ,CAACI,UAAnB,CAAN;AACD;;AACD,WAAOJ,QAAQ,CAACK,IAAT,EAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEEJ,EAAAA,GAAG,CAACF,IAAD,EAAO;AACR,QAAIA,IAAI,CAAC,CAAD,CAAJ,KAAY,GAAZ,IAAmBA,IAAI,CAACO,OAAL,CAAa,GAAb,MAAsB,CAAC,CAA9C,EAAiD;AAC/CP,MAAAA,IAAI,GAAG,MAAMQ,kBAAkB,CAACR,IAAI,CAACS,KAAL,CAAW,CAAX,CAAD,CAA/B;AACD;;AACD,WAAO,KAAKd,MAAL,CAAYe,QAAZ,GAAuBV,IAA9B;AACD;;AAvCY;AA0Cf;AACA;AACA;;;AAEAW,MAAM,CAACC,OAAP,GAAiBhB,QAAjB","sourcesContent":["'use strict';\n\nconst fetch = require('node-fetch');\nconst utils = require('./utils');\nconst config = require('./config');\n\n/**\n * Registry constructor. Create an instance of a registry for querying registry.npmjs.org directly.\n *\n * ```js\n * const registry = new Registry();\n * ```\n *\n * @returns {Object} instance of `Registry`\n * @name Registry\n * @api public\n */\n\nclass Registry {\n  constructor() {\n    this.config = utils.clone(config);\n  }\n\n  /**\n   * Get the package.json for the specified repository.\n   *\n   * ```js\n   * let results = await registry.get('micromatch')\n   * ```\n   * @param  {String} `name` Repository name to get.\n   * @return {Promise} Results of the query when promise is resolved.\n   * @name .get\n   * @api public\n   */\n\n  async get(name) {\n    const response = await fetch(this.url(name));\n    if (!response.ok) {\n      throw new Error(response.statusText);\n    }\n    return response.json();\n  }\n\n  /**\n   * Build a formatted url\n   *\n   * @param  {String} `name` Repo name.\n   * @return {String} formatted url string\n   * @name .url\n   * @api public\n   */\n\n  url(name) {\n    if (name[0] === '@' && name.indexOf('/') !== -1) {\n      name = '@' + encodeURIComponent(name.slice(1));\n    }\n    return this.config.registry + name;\n  }\n}\n\n/**\n * Exposes `Registry`\n */\n\nmodule.exports = Registry;\n"]},"metadata":{},"sourceType":"script"}