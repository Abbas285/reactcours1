{"ast":null,"code":"'use strict';\n\nconst Base = require('./base');\n\nconst utils = require('../utils');\n\nconst config = require('../config');\n/**\n * Maintainer constructor. Create an instance of an npm maintainer by maintainer name.\n *\n * ```js\n * const maintainer = new Maintainer('doowb');\n * ```\n *\n * @param {String} `name` Name of the npm maintainer to get information about.\n * @name Maintainer\n * @api public\n */\n\n\nclass Maintainer extends Base {\n  constructor(name) {\n    super();\n    this.name = name;\n    this.config = utils.clone(config);\n  }\n  /**\n   * Get the repositories owned by this maintainer.\n   *\n   * ```js\n   * maintainer.repos()\n   *   .then(function(repos) {\n   *     console.log(repos);\n   *   }, function(err) {\n   *     console.error(err);\n   *   });\n   * ```\n   *\n   * @return {Promise} Returns array of repository names when promise resolves.\n   * @name .repos\n   * @api public\n   */\n\n\n  async repos() {\n    if (!this.cache.has('repos')) {\n      let from = 0;\n      let size = 250;\n      let url = `${this.config.registry}-/v1/search?text=maintainer:${this.name}&size=${size}`;\n      let results = [];\n      await utils.paged(url, (_, res, acc) => {\n        let {\n          objects,\n          total\n        } = res.data;\n        results.push(...objects);\n\n        if (total >= from + size) {\n          from += size;\n          return `${url}&from=${from}`;\n        }\n      });\n      this.cache.set('repos', results.map(obj => obj.package.name));\n    }\n\n    return this.cache.get('repos');\n  }\n\n}\n/**\n * Exposes `Maintainer`\n */\n\n\nmodule.exports = Maintainer;","map":{"version":3,"sources":["C:/Users/LPT158/Desktop/New folder/reactpro/node_modules/npm-api/lib/models/maintainer.js"],"names":["Base","require","utils","config","Maintainer","constructor","name","clone","repos","cache","has","from","size","url","registry","results","paged","_","res","acc","objects","total","data","push","set","map","obj","package","get","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,IAAI,GAAGC,OAAO,CAAC,QAAD,CAApB;;AACA,MAAMC,KAAK,GAAGD,OAAO,CAAC,UAAD,CAArB;;AACA,MAAME,MAAM,GAAGF,OAAO,CAAC,WAAD,CAAtB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,MAAMG,UAAN,SAAyBJ,IAAzB,CAA8B;AAC5BK,EAAAA,WAAW,CAACC,IAAD,EAAO;AAChB;AACA,SAAKA,IAAL,GAAYA,IAAZ;AACA,SAAKH,MAAL,GAAcD,KAAK,CAACK,KAAN,CAAYJ,MAAZ,CAAd;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEa,QAALK,KAAK,GAAG;AACZ,QAAI,CAAC,KAAKC,KAAL,CAAWC,GAAX,CAAe,OAAf,CAAL,EAA8B;AAC5B,UAAIC,IAAI,GAAG,CAAX;AACA,UAAIC,IAAI,GAAG,GAAX;AACA,UAAIC,GAAG,GAAI,GAAE,KAAKV,MAAL,CAAYW,QAAS,+BAA8B,KAAKR,IAAK,SAAQM,IAAK,EAAvF;AACA,UAAIG,OAAO,GAAG,EAAd;AACA,YAAMb,KAAK,CAACc,KAAN,CAAYH,GAAZ,EAAiB,CAACI,CAAD,EAAIC,GAAJ,EAASC,GAAT,KAAiB;AACtC,YAAI;AAAEC,UAAAA,OAAF;AAAWC,UAAAA;AAAX,YAAqBH,GAAG,CAACI,IAA7B;AACAP,QAAAA,OAAO,CAACQ,IAAR,CAAa,GAAGH,OAAhB;;AACA,YAAIC,KAAK,IAAKV,IAAI,GAAGC,IAArB,EAA4B;AAC1BD,UAAAA,IAAI,IAAIC,IAAR;AACA,iBAAQ,GAAEC,GAAI,SAAQF,IAAK,EAA3B;AACD;AACF,OAPK,CAAN;AASA,WAAKF,KAAL,CAAWe,GAAX,CAAe,OAAf,EAAwBT,OAAO,CAACU,GAAR,CAAYC,GAAG,IAAIA,GAAG,CAACC,OAAJ,CAAYrB,IAA/B,CAAxB;AACD;;AACD,WAAO,KAAKG,KAAL,CAAWmB,GAAX,CAAe,OAAf,CAAP;AACD;;AA1C2B;AA6C9B;AACA;AACA;;;AAEAC,MAAM,CAACC,OAAP,GAAiB1B,UAAjB","sourcesContent":["'use strict';\n\nconst Base = require('./base');\nconst utils = require('../utils');\nconst config = require('../config');\n\n/**\n * Maintainer constructor. Create an instance of an npm maintainer by maintainer name.\n *\n * ```js\n * const maintainer = new Maintainer('doowb');\n * ```\n *\n * @param {String} `name` Name of the npm maintainer to get information about.\n * @name Maintainer\n * @api public\n */\n\nclass Maintainer extends Base {\n  constructor(name) {\n    super();\n    this.name = name;\n    this.config = utils.clone(config);\n  }\n\n  /**\n   * Get the repositories owned by this maintainer.\n   *\n   * ```js\n   * maintainer.repos()\n   *   .then(function(repos) {\n   *     console.log(repos);\n   *   }, function(err) {\n   *     console.error(err);\n   *   });\n   * ```\n   *\n   * @return {Promise} Returns array of repository names when promise resolves.\n   * @name .repos\n   * @api public\n   */\n\n  async repos() {\n    if (!this.cache.has('repos')) {\n      let from = 0;\n      let size = 250;\n      let url = `${this.config.registry}-/v1/search?text=maintainer:${this.name}&size=${size}`;\n      let results = [];\n      await utils.paged(url, (_, res, acc) => {\n        let { objects, total } = res.data;\n        results.push(...objects);\n        if (total >= (from + size)) {\n          from += size;\n          return `${url}&from=${from}`;\n        }\n      });\n\n      this.cache.set('repos', results.map(obj => obj.package.name));\n    }\n    return this.cache.get('repos');\n  }\n}\n\n/**\n * Exposes `Maintainer`\n */\n\nmodule.exports = Maintainer;\n"]},"metadata":{},"sourceType":"script"}