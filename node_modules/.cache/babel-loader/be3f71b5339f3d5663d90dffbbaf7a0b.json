{"ast":null,"code":"'use strict';\n\nconst List = require('./lib/list');\n\nconst View = require('./lib/view');\n\nconst Repo = require('./lib/models/repo');\n\nconst Maintainer = require('./lib/models/maintainer');\n\nconst define = (obj, name, value) => Reflect.defineProperty(obj, name, {\n  value\n});\n\nlet cache = null;\n/**\n * NpmApi constructor. Create an instance to work with maintainer and repository information.\n *\n * ```js\n * let npm = new NpmApi();\n * ```\n * @name NpmApi\n * @api public\n */\n\nclass NpmApi {\n  constructor() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    this.options = { ...options\n    };\n    this.reset();\n    define(this, 'List', List);\n    define(this, 'View', View);\n    define(this, 'Repo', Repo);\n    define(this, 'Maintainer', Maintainer);\n  }\n\n  reset() {\n    cache = new Map();\n    cache.set('lists', new Map());\n    cache.set('views', new Map());\n    cache.set('repos', new Map());\n    cache.set('maintainers', new Map());\n  }\n\n  use(fn) {\n    fn.call(this, this, this.options);\n  }\n  /**\n   * Create a new instance of `View` or get an existing instance to work\n   * with npm couchdb views.\n   *\n   * ```js\n   * var view = npm.view('byUser');\n   * ```\n   *\n   * @param  {String} `name` Name of the couchdb view to work with.\n   * @return {Object} `View` instance\n   * @name .view\n   * @api public\n   */\n\n\n  view(name) {\n    let views = cache.get('views');\n\n    if (views.has(name)) {\n      return views.get(name);\n    }\n\n    let view = new View(name);\n    views.set(name, view);\n    return view;\n  }\n  /**\n   * Create a new instance of `List` or get an existing instance to work\n   * with npm couchdb list.\n   *\n   * ```js\n   * var list = npm.list('sortCount', 'byUser');\n   * ```\n   *\n   * @param  {String} `name` Name of the couchdb list to work with.\n   * @param  {String|Object} `view` Name or instance of a `view` to work with.\n   * @return {Object} `List` instance\n   * @name .list\n   * @api public\n   */\n\n\n  list(name, view) {\n    let lists = cache.get('lists');\n    let viewName = view;\n\n    if (typeof view === 'object') {\n      viewName = view.name;\n    }\n\n    let key = `${viewName}.${name}`;\n\n    if (lists.has(key)) {\n      return lists.get(key);\n    }\n\n    if (typeof view === 'string') {\n      view = this.view(view);\n    }\n\n    let list = new List(name, view);\n    lists.set(key, list);\n    return list;\n  }\n  /**\n   * Create an instance of a `repo` to work with.\n   *\n   * ```js\n   * var repo =  npm.repo('micromatch');\n   * ```\n   *\n   * @param  {String} `name` Name of the repo as it's published to npm.\n   * @return {Object} Instance of a `Repo` model to work with.\n   * @name .repo\n   * @api public\n   */\n\n\n  repo(name) {\n    let repos = cache.get('repos');\n\n    if (repos.has(name)) {\n      return repos.get(name);\n    }\n\n    let repo = new Repo(name);\n    repos.set(name, repo);\n    return repo;\n  }\n  /**\n   * Create an instance of a `maintainer` to work with.\n   *\n   * ```js\n   * var maintainer =  npm.maintainer('doowb');\n   * ```\n   *\n   * @param  {String} `name` Npm username of the maintainer.\n   * @return {Object} Instance of a `Maintainer` model to work with.\n   * @name .maintainer\n   * @api public\n   */\n\n\n  maintainer(name) {\n    let maintainers = cache.get('maintainers');\n\n    if (maintainers.has(name)) {\n      return maintainers.get(name);\n    }\n\n    let maintainer = new Maintainer(name);\n    maintainers.set(name, maintainer);\n    return maintainer;\n  }\n\n}\n/**\n * Exposes `NpmApi`\n */\n\n\nmodule.exports = NpmApi;","map":{"version":3,"sources":["C:/Users/LPT158/Desktop/New folder/reactpro/node_modules/npm-api/index.js"],"names":["List","require","View","Repo","Maintainer","define","obj","name","value","Reflect","defineProperty","cache","NpmApi","constructor","options","reset","Map","set","use","fn","call","view","views","get","has","list","lists","viewName","key","repo","repos","maintainer","maintainers","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst List = require('./lib/list');\nconst View = require('./lib/view');\nconst Repo = require('./lib/models/repo');\nconst Maintainer = require('./lib/models/maintainer');\n\nconst define = (obj, name, value) => Reflect.defineProperty(obj, name, { value });\nlet cache = null;\n\n/**\n * NpmApi constructor. Create an instance to work with maintainer and repository information.\n *\n * ```js\n * let npm = new NpmApi();\n * ```\n * @name NpmApi\n * @api public\n */\n\nclass NpmApi {\n  constructor(options = {}) {\n    this.options = { ...options };\n    this.reset();\n\n    define(this, 'List', List);\n    define(this, 'View', View);\n    define(this, 'Repo', Repo);\n    define(this, 'Maintainer', Maintainer);\n  }\n\n  reset() {\n    cache = new Map();\n    cache.set('lists', new Map());\n    cache.set('views', new Map());\n    cache.set('repos', new Map());\n    cache.set('maintainers', new Map());\n  }\n\n  use(fn) {\n    fn.call(this, this, this.options);\n  }\n\n  /**\n   * Create a new instance of `View` or get an existing instance to work\n   * with npm couchdb views.\n   *\n   * ```js\n   * var view = npm.view('byUser');\n   * ```\n   *\n   * @param  {String} `name` Name of the couchdb view to work with.\n   * @return {Object} `View` instance\n   * @name .view\n   * @api public\n   */\n\n  view(name) {\n    let views = cache.get('views');\n    if (views.has(name)) {\n      return views.get(name);\n    }\n\n    let view = new View(name);\n    views.set(name, view);\n    return view;\n  }\n\n  /**\n   * Create a new instance of `List` or get an existing instance to work\n   * with npm couchdb list.\n   *\n   * ```js\n   * var list = npm.list('sortCount', 'byUser');\n   * ```\n   *\n   * @param  {String} `name` Name of the couchdb list to work with.\n   * @param  {String|Object} `view` Name or instance of a `view` to work with.\n   * @return {Object} `List` instance\n   * @name .list\n   * @api public\n   */\n\n  list(name, view) {\n    let lists = cache.get('lists');\n    let viewName = view;\n    if (typeof view === 'object') {\n      viewName = view.name;\n    }\n\n    let key = `${viewName}.${name}`;\n    if (lists.has(key)) {\n      return lists.get(key);\n    }\n\n    if (typeof view === 'string') {\n      view = this.view(view);\n    }\n\n    let list = new List(name, view);\n    lists.set(key, list);\n    return list;\n  }\n\n  /**\n   * Create an instance of a `repo` to work with.\n   *\n   * ```js\n   * var repo =  npm.repo('micromatch');\n   * ```\n   *\n   * @param  {String} `name` Name of the repo as it's published to npm.\n   * @return {Object} Instance of a `Repo` model to work with.\n   * @name .repo\n   * @api public\n   */\n\n  repo(name) {\n    let repos = cache.get('repos');\n    if (repos.has(name)) {\n      return repos.get(name);\n    }\n\n    let repo = new Repo(name);\n    repos.set(name, repo);\n    return repo;\n  }\n\n  /**\n   * Create an instance of a `maintainer` to work with.\n   *\n   * ```js\n   * var maintainer =  npm.maintainer('doowb');\n   * ```\n   *\n   * @param  {String} `name` Npm username of the maintainer.\n   * @return {Object} Instance of a `Maintainer` model to work with.\n   * @name .maintainer\n   * @api public\n   */\n\n  maintainer(name) {\n    let maintainers = cache.get('maintainers');\n    if (maintainers.has(name)) {\n      return maintainers.get(name);\n    }\n\n    let maintainer = new Maintainer(name);\n    maintainers.set(name, maintainer);\n    return maintainer;\n  }\n}\n\n/**\n * Exposes `NpmApi`\n */\n\nmodule.exports = NpmApi;\n"]},"metadata":{},"sourceType":"script"}