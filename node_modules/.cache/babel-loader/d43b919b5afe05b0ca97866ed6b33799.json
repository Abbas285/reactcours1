{"ast":null,"code":"'use strict';\n\nvar set = require('set-getter');\n/**\n * Cache results of the first function call to ensure only calling once.\n *\n * ```js\n * var utils = require('lazy-cache')(require);\n * // cache the call to `require('ansi-yellow')`\n * utils('ansi-yellow', 'yellow');\n * // use `ansi-yellow`\n * console.log(utils.yellow('this is yellow'));\n * ```\n *\n * @param  {Function} `fn` Function that will be called only once.\n * @return {Function} Function that can be called to get the cached function\n * @api public\n */\n\n\nfunction lazyCache(requireFn) {\n  var cache = {};\n  return function proxy(name, alias) {\n    var key = alias; // camel-case the module `name` if `alias` is not defined\n\n    if (typeof key !== 'string') {\n      key = camelcase(name);\n    } // create a getter to lazily invoke the module the first time it's called\n\n\n    function getter() {\n      return cache[key] || (cache[key] = requireFn(name));\n    } // trip the getter if `process.env.UNLAZY` is defined\n\n\n    if (unlazy(process.env)) {\n      getter();\n    }\n\n    set(proxy, key, getter);\n    return getter;\n  };\n}\n/**\n * Return true if `process.env.LAZY` is true, or travis is running.\n */\n\n\nfunction unlazy(env) {\n  return env.UNLAZY === 'true' || env.UNLAZY === true || env.TRAVIS;\n}\n/**\n * Camelcase the the given module `name`.\n */\n\n\nfunction camelcase(str) {\n  if (str.length === 1) {\n    return str.toLowerCase();\n  }\n\n  str = str.replace(/^[\\W_]+|[\\W_]+$/g, '').toLowerCase();\n  return str.replace(/[\\W_]+(\\w|$)/g, function (_, ch) {\n    return ch.toUpperCase();\n  });\n}\n/**\n * Expose `lazyCache`\n */\n\n\nmodule.exports = lazyCache;","map":{"version":3,"sources":["C:/Users/LPT158/Desktop/New folder/reactpro/node_modules/lazy-cache/index.js"],"names":["set","require","lazyCache","requireFn","cache","proxy","name","alias","key","camelcase","getter","unlazy","process","env","UNLAZY","TRAVIS","str","length","toLowerCase","replace","_","ch","toUpperCase","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,GAAG,GAAGC,OAAO,CAAC,YAAD,CAAjB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,SAASC,SAAT,CAAmBC,SAAnB,EAA8B;AAC5B,MAAIC,KAAK,GAAG,EAAZ;AAEA,SAAO,SAASC,KAAT,CAAeC,IAAf,EAAqBC,KAArB,EAA4B;AACjC,QAAIC,GAAG,GAAGD,KAAV,CADiC,CAGjC;;AACA,QAAI,OAAOC,GAAP,KAAe,QAAnB,EAA6B;AAC3BA,MAAAA,GAAG,GAAGC,SAAS,CAACH,IAAD,CAAf;AACD,KANgC,CAQjC;;;AACA,aAASI,MAAT,GAAkB;AAChB,aAAON,KAAK,CAACI,GAAD,CAAL,KAAeJ,KAAK,CAACI,GAAD,CAAL,GAAaL,SAAS,CAACG,IAAD,CAArC,CAAP;AACD,KAXgC,CAajC;;;AACA,QAAIK,MAAM,CAACC,OAAO,CAACC,GAAT,CAAV,EAAyB;AACvBH,MAAAA,MAAM;AACP;;AAEDV,IAAAA,GAAG,CAACK,KAAD,EAAQG,GAAR,EAAaE,MAAb,CAAH;AACA,WAAOA,MAAP;AACD,GApBD;AAqBD;AAED;AACA;AACA;;;AAEA,SAASC,MAAT,CAAgBE,GAAhB,EAAqB;AACnB,SAAOA,GAAG,CAACC,MAAJ,KAAe,MAAf,IAAyBD,GAAG,CAACC,MAAJ,KAAe,IAAxC,IAAgDD,GAAG,CAACE,MAA3D;AACD;AAED;AACA;AACA;;;AAEA,SAASN,SAAT,CAAmBO,GAAnB,EAAwB;AACtB,MAAIA,GAAG,CAACC,MAAJ,KAAe,CAAnB,EAAsB;AACpB,WAAOD,GAAG,CAACE,WAAJ,EAAP;AACD;;AACDF,EAAAA,GAAG,GAAGA,GAAG,CAACG,OAAJ,CAAY,kBAAZ,EAAgC,EAAhC,EAAoCD,WAApC,EAAN;AACA,SAAOF,GAAG,CAACG,OAAJ,CAAY,eAAZ,EAA6B,UAASC,CAAT,EAAYC,EAAZ,EAAgB;AAClD,WAAOA,EAAE,CAACC,WAAH,EAAP;AACD,GAFM,CAAP;AAGD;AAED;AACA;AACA;;;AAEAC,MAAM,CAACC,OAAP,GAAiBtB,SAAjB","sourcesContent":["'use strict';\n\nvar set = require('set-getter');\n\n/**\n * Cache results of the first function call to ensure only calling once.\n *\n * ```js\n * var utils = require('lazy-cache')(require);\n * // cache the call to `require('ansi-yellow')`\n * utils('ansi-yellow', 'yellow');\n * // use `ansi-yellow`\n * console.log(utils.yellow('this is yellow'));\n * ```\n *\n * @param  {Function} `fn` Function that will be called only once.\n * @return {Function} Function that can be called to get the cached function\n * @api public\n */\n\nfunction lazyCache(requireFn) {\n  var cache = {};\n\n  return function proxy(name, alias) {\n    var key = alias;\n\n    // camel-case the module `name` if `alias` is not defined\n    if (typeof key !== 'string') {\n      key = camelcase(name);\n    }\n\n    // create a getter to lazily invoke the module the first time it's called\n    function getter() {\n      return cache[key] || (cache[key] = requireFn(name));\n    }\n\n    // trip the getter if `process.env.UNLAZY` is defined\n    if (unlazy(process.env)) {\n      getter();\n    }\n\n    set(proxy, key, getter);\n    return getter;\n  };\n}\n\n/**\n * Return true if `process.env.LAZY` is true, or travis is running.\n */\n\nfunction unlazy(env) {\n  return env.UNLAZY === 'true' || env.UNLAZY === true || env.TRAVIS;\n}\n\n/**\n * Camelcase the the given module `name`.\n */\n\nfunction camelcase(str) {\n  if (str.length === 1) {\n    return str.toLowerCase();\n  }\n  str = str.replace(/^[\\W_]+|[\\W_]+$/g, '').toLowerCase();\n  return str.replace(/[\\W_]+(\\w|$)/g, function(_, ch) {\n    return ch.toUpperCase();\n  });\n}\n\n/**\n * Expose `lazyCache`\n */\n\nmodule.exports = lazyCache;\n"]},"metadata":{},"sourceType":"script"}